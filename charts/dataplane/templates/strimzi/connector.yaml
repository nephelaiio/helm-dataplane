{{- $fullName := include "dataplane.strimzi.connect.fullname" . -}}
{{- $registryName := include "dataplane.registry.fullname" . -}}
{{- $registryPort := .Values.registry.service.port -}}

{{- range $db := .Values.cdc.postgres }}
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnector
metadata:
  name: {{ $fullName }}-{{ $db.servername | lower }}-{{ $db.dbname | lower }}
  labels:
    strimzi.io/cluster: {{ $fullName }}
spec:
  class: io.debezium.connector.postgresql.PostgresConnector
  tasksMax: 1
  config:
    database.hostname: {{ $db.hostname }}
    database.port: "{{ $db.port | default 5432 }}"
    database.user: "${env:POSTGRES_CDC_USER}"
    database.password: "${env:POSTGRES_CDC_PASS}"
    database.server.name: "{{ $db.servername }}"
    database.dbname: "{{ $db.dbname }}"
    snapshot.new.tables: parallel
    tasks.max: "1"
    key.converter: io.confluent.connect.avro.AvroConverter
    key.converter.schema.registry.url: http://{{ $registryName }}:{{ $registryPort }}
    value.converter: io.confluent.connect.avro.AvroConverter
    value.converter.schema.registry.url: http://{{ $registryName }}:{{ $registryPort }}
    {{- if $db.signaling }}
    signal.data.collection: debezium.signaling
    {{- end }}
    transforms: reroute
    transforms.reroute.type: io.debezium.transforms.ByLogicalTableRouter
    transforms.reroute.topic.regex: (.*)
    transforms.reroute.topic.replacement: cdc.$1
{{- end }}
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnector
metadata:
  name: {{ $fullName }}-warehouse-sink
  labels:
    strimzi.io/cluster: {{ $fullName }}
spec:
  class: io.confluent.connect.jdbc.JdbcSinkConnector
  tasksMax: 1
  config:
    connection.url: jdbc:postgresql://{{ include "dataplane.warehouse.cluster" . }}:5432/{{ include "dataplane.warehouse.db" . }}
    connection.user: "${env:POSTGRES_DW_USER}"
    connection.password: "${env:POSTGRES_DW_PASS}"
    tasks.max: "1"
    topics.regex: "cdc.(.*)"
    auto.create: true
    key.converter: io.confluent.connect.avro.AvroConverter
    key.converter.schema.registry.url: http://{{ $registryName }}:{{ $registryPort }}
    value.converter: io.confluent.connect.avro.AvroConverter
    value.converter.schema.registry.url: http://{{ $registryName }}:{{ $registryPort }}
    transforms: "unwrap,rename"
    transforms.unwrap.type: io.debezium.transforms.ExtractNewRecordState
    transforms.unwrap.drop.tombstones: false
    transforms.unwrap.delete.handling.mode: rewrite
    transforms.rename.type: org.apache.kafka.connect.transforms.RegexRouter
    transforms.rename.regex: "^cdc\\.(.*)\\.(.*)\\.(.*)"
    transforms.rename.replacement: "$1_$3"
