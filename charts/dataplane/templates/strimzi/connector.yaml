{{- $fullName := include "dataplane.strimzi.connect.fullname" . }}
{{- $registryName := include "dataplane.registry.fullname" . }}
{{- $registryPort := .Values.registry.service.port }}

{{- range $db := .Values.cdc.postgres }}
{{-   $dbId := required "database id is required" $db.id }}
{{-   $dbConnectorName := lower (printf "%s-%s-%s" $fullName $dbId $db.dbname) }}
{{-   $dbSlotName := $dbConnectorName | replace "-" "_" }}
{{-   $exclude := list }}
{{-   $include := list }}

{{-   if and (hasKey $db "exclude") (hasKey $db "include") }}
{{-     fail "table excludes and includes are mutually exclusive"  }}
{{-   end }}

{{-   if and (hasKey $db "partitions") (hasKey $db "include") }}
{{-     fail "table partitions and includes are mutually exclusive"  }}
{{-   end }}

{{-   if hasKey $db "exclude" }}
{{-     if ge (len $db.exclude) 1 }}
{{-       range $item := $db.exclude }}
{{-         $exclude = append $exclude $item }}
{{-       end }}
{{-     end }}
{{-   end }}

{{-   if hasKey $db "include" }}
{{-     if ge (len $db.include) 1 }}
{{-       range $item := $db.include }}
{{-         $include = append $include $item }}
{{-       end }}
{{-     end }}
{{-   end }}

{{-   if hasKey $db "partitions" }}
{{-     if ge (len $db.partitions) 1 }}
{{-       range $item := $db.partitions }}
{{-         $exclude = append $exclude $item.source }}
{{-       end }}
{{-     end }}
{{-   end }}

---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnector
metadata:
  name: {{ $dbConnectorName }}
  labels:
    strimzi.io/cluster: {{ $fullName }}
spec:
  class: io.debezium.connector.postgresql.PostgresConnector
  tasksMax: 1
  config:
    database.hostname: {{ $db.hostname }}
    database.port: "{{ $db.port | default 5432 }}"
    database.user: "${env:POSTGRES_CDC_USER}"
    database.password: "${env:POSTGRES_CDC_PASS}"
    database.dbname: "{{ $db.dbname }}"
    database.server.name: "{{ $dbId }}"
    snapshot.new.tables: parallel
    slot.name: "{{ $dbSlotName }}"
    slot.drop.on.stop: {{ .Values.cdc.replication.slot.drop }}
    plugin.name: pgoutput
    tasks.max: "1"
    {{- if ge (len $exclude) 1 }}
    table.exclude.list: "{{- range $i, $p := $exclude -}}{{- if $i }},{{- end -}}{{ $p }}{{- end }}"
    {{- end }}
    {{- if ge (len $include) 1 }}
    table.include.list: "{{- range $i, $p := $include -}}{{- if $i }},{{- end -}}{{ $p }}{{- end }}"
    {{- end }}
    key.converter: io.confluent.connect.avro.AvroConverter
    key.converter.schema.registry.url: http://{{ $registryName }}:{{ $registryPort }}
    value.converter: io.confluent.connect.avro.AvroConverter
    value.converter.schema.registry.url: http://{{ $registryName }}:{{ $registryPort }}
    {{- if $db.signaling }}
    signal.data.collection: debezium.signaling
    {{- end }}
    topic.prefix: "{{ $dbId }}"
    transforms: reroute
    transforms.reroute.type: io.debezium.transforms.ByLogicalTableRouter
    transforms.reroute.topic.regex: (.*)
    transforms.reroute.topic.replacement: cdc.$1

{{-   if (hasKey $db "partitions") }}
{{-     if ge (len $db.partitions) 1 }}
{{-       range $partition := $db.partitions }}
{{-         $partitionSource := required "partition source is required" $partition.source }}
{{-         $partitionSink := required "partition sink is required" $partition.sink }}
{{-         $partitionConnectorName := lower (printf "%s-%s" $dbConnectorName $partitionSink) | replace "." "-" }}
{{-         $partitionSlotName := $partitionConnectorName | replace "-" "_" }}
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnector
metadata:
  name: {{ $partitionConnectorName }}
  labels:
    strimzi.io/cluster: {{ $fullName }}
spec:
  class: io.debezium.connector.postgresql.PostgresConnector
  tasksMax: 1
  config:
    database.hostname: {{ $db.hostname }}
    database.port: "{{ $db.port | default 5432 }}"
    database.user: "${env:POSTGRES_CDC_USER}"
    database.password: "${env:POSTGRES_CDC_PASS}"
    database.dbname: "{{ $db.dbname }}"
    database.server.name: "{{ $dbId }}-{{ $partition.sink }}"
    snapshot.new.tables: parallel
    slot.name: {{ $partitionSlotName }}
    slot.drop.on.stop: {{ .Values.cdc.replication.slot.drop }}
    plugin.name: pgoutput
    tasks.max: "1"
    table.include.list: "{{ $partitionSource }}"
    key.converter: io.confluent.connect.avro.AvroConverter
    key.converter.schema.registry.url: http://{{ $registryName }}:{{ $registryPort }}
    value.converter: io.confluent.connect.avro.AvroConverter
    value.converter.schema.registry.url: http://{{ $registryName }}:{{ $registryPort }}
    {{- if $db.signaling }}
    signal.data.collection: debezium.signaling
    {{- end }}
    topic.prefix: "{{ $dbId }}"
    transforms: reroute
    transforms.reroute.type: io.debezium.transforms.ByLogicalTableRouter
    transforms.reroute.topic.regex: "^([^\\.]+)\\.([^\\.]+)\\..*"
    transforms.reroute.topic.replacement: "cdc.{{ $dbId }}.$2.{{ $partitionSink }}"
{{-       end }}
{{-     end }}
{{-   end }}
{{- end }}

---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnector
metadata:
  name: {{ $fullName }}-warehouse-sink
  labels:
    strimzi.io/cluster: {{ $fullName }}
spec:
  class: io.confluent.connect.jdbc.JdbcSinkConnector
  tasksMax: 1
  config:
    connection.url: jdbc:postgresql://{{ include "dataplane.warehouse.cluster" . }}:5432/{{ include "dataplane.warehouse.db" . }}
    connection.user: "${env:POSTGRES_DW_USER}"
    connection.password: "${env:POSTGRES_DW_PASS}"
    tasks.max: "1"
    topics.regex: "cdc.(.*)"
    auto.create: true
    key.converter: io.confluent.connect.avro.AvroConverter
    key.converter.schema.registry.url: http://{{ $registryName }}:{{ $registryPort }}
    value.converter: io.confluent.connect.avro.AvroConverter
    value.converter.schema.registry.url: http://{{ $registryName }}:{{ $registryPort }}
    transforms: "unwrap,rename"
    transforms.unwrap.type: io.debezium.transforms.ExtractNewRecordState
    transforms.unwrap.drop.tombstones: false
    transforms.unwrap.delete.handling.mode: rewrite
    transforms.rename.type: org.apache.kafka.connect.transforms.RegexRouter
    transforms.rename.regex: "^cdc\\.([^\\.]*)\\.([^\\.]*)\\.([^\\.]*)"
    transforms.rename.replacement: "$1_$2_$3"
