{{- $connectSvc := printf "%s-%s" (include "dataplane.strimzi.connect.fullname" .) "connect-api" }}
{{- $connectPort := 8083 }}
{{- $svcName :=  include "dataplane.registry.fullname" . }}
{{- $svcPort := .Values.registry.service.port -}}
{{- $bootstrapHost := include "dataplane.strimzi.kafka.bootstrap" . }}
{{- $bootstrapPort := .Values.strimzi.kafka.listener.plain.port }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $svcName }}
  labels:
    {{- include "dataplane.registry.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "dataplane.registry.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.registry.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "dataplane.registry.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.registry.podSecurityContext | nindent 8 }}
      containers:
        - name: registry-web
          securityContext:
            {{- toYaml .Values.registry.securityContext | nindent 12 }}
          image: "{{ .Values.registry.image.repository }}:{{ .Values.registry.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.registry.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ $svcPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.registry.probeDelay }}
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.registry.probeDelay }}
          resources:
            {{- toYaml .Values.registry.resources | nindent 12 }}
          env:
            - name: SCHEMA_REGISTRY_HOST_NAME
              value: schema-registry
            - name: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS
              value: {{ $bootstrapHost }}:{{ $bootstrapPort }}
          {{- with .Values.registry.podEnvironmentVars }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
        - name: connector-restart
          securityContext:
            {{- toYaml .Values.registry.securityContext | nindent 12 }}
          image: {{ .Values.registry.utilImage.repository }}:{{ .Values.registry.utilImage.tag }}
          imagePullPolicy: {{ .Values.registry.utilImage.pullPolicy }}
          resources:
            requests:
              cpu: 500m
              memory: 200Mi
            limits:
              cpu: 500m
              memory: 200Mi
          command:
            - "sh"
            - "-c"
            - >-
              until curl -s http://{{ $svcName }}:{{ $svcPort }}/ -o /dev/null; do
                echo waiting for registry service;
                sleep 10;
              done;
              echo registry service up;
              until curl -s http://{{ $connectSvc }}:{{ $connectPort }}/ -o /dev/null; do
                echo waiting for connect api service;
                sleep 10;
              done;
              echo connect api service up;
              sleep 10;
              echo restarting connectors;
              curl -s http://{{ $connectSvc }}:{{ $connectPort }}/connectors | jq '.[]' -r |
                xargs -I{} curl -s -XPOST http://{{ $connectSvc }}:{{ $connectPort }}/connectors/{}/restart;
              echo connectors restarted;
              echo restarting tasks;
              curl -s http://{{ $connectSvc }}:{{ $connectPort }}/connectors | jq '.[]' -r |
                xargs -I{} bash -c "curl -s http://{{ $connectSvc }}:{{ $connectPort }}/connectors/{}/tasks |
                   jq 'map(.id.task) | .[]' -r |
                   xargs -I[] curl -s -XPOST http://{{ $connectSvc }}:{{ $connectPort }}/connectors/{}/tasks/[]/restart"
              echo tasks restarted;
              tail -f /dev/null;
      initContainers:
        - name: registry-init
          image: {{ .Values.registry.utilImage.repository }}:{{ .Values.registry.utilImage.tag }}
          imagePullPolicy: {{ .Values.registry.utilImage.pullPolicy }}
          command:
            - sh
            - "-c"
            - >-
              echo wait for kafka broker;
              until nc -w 1 -vz {{ $bootstrapHost }} {{ $bootstrapPort }} 2>/dev/null; do
                echo waiting for kafka broker;
                sleep 10;
              done;
              echo kafka broker up;
      {{- with .Values.registry.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.registry.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.registry.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
