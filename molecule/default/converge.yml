---
- name: converge

  hosts: localhost

  gather_facts: false

  roles:

    - nephelaiio.plugins

  pre_tasks:

    - name: deploy postgresql db
      kubernetes.core.helm:
        name: postgresql
        chart_ref: postgresql
        chart_repo_url: https://charts.bitnami.com/bitnami
        release_namespace: "{{ postgres_namespace }}"
        create_namespace: true
        state: present
        wait: true
        kubeconfig: "{{ k8s_kubeconfig }}"
        binary_path: "{{ k8s_helm_bin }}"
        values:
          global:
            postgresql:
              auth:
                postgresPassword: "{{ postgres_db_pass}}"
          primary:
            service:
              type: LoadBalancer
              annotations:
                metallb.universe.tf/address-pool: private
                external-dns.alpha.kubernetes.io/hostname: "{{ postgres_db_host }}"

    - name: set service metadata
      ansible.builtin.set_fact:
        loadbalancer_data: "{{ _loadbalancers }}"
        loadbalancer_failed: "{{ _loadbalancers | json_query(status_filter) }}"
        loadbalancer_ips: "{{ _loadbalancers | json_query(dns_filter) | json_query(dns_map) | to_dict }}"
      vars:
        _loadbalancers: "{{ service_data | json_query(loadbalancer_filter) }}"
        service_data: "{{ service_query | selectattr('spec.type', 'equalto', 'LoadBalancer') }}"
        dns_filter: "[?((metadata.annotations.\"external-dns.alpha.kubernetes.io/hostname\" || '') != '')]"
        dns_map: "[].to_array([metadata.annotations.\"external-dns.alpha.kubernetes.io/hostname\", status.loadBalancer.ingress[0].ip])"
        loadbalancer_filter: "[?(spec.type == 'LoadBalancer')]"
        status_filter: "[?!not_null(status.loadBalancer)].metadata.name"
        service_query: "{{
          query(
            'kubernetes.core.k8s',
            kind='Service',
            namespace=postgres_namespace,
            kubeconfig=k8s_kubeconfig
          )
        }}"

    - name: drop database
      community.postgresql.postgresql_db:
        name: "{{ postgres_db_name }}"
        state: absent
        login_user: "{{ postgres_db_user }}"
        login_password: "{{ postgres_db_pass }}"
        login_host: "{{ loadbalancer_ips[postgres_db_host] }}"

    - name: create database
      community.postgresql.postgresql_db:
        name: "{{ postgres_db_name }}"
        state: present
        login_user: "{{ postgres_db_user }}"
        login_password: "{{ postgres_db_pass }}"
        login_host: "{{ loadbalancer_ips[postgres_db_host] }}"

    - name: create data tempdir
      ansible.builtin.tempfile:
        state: directory
        prefix: data
      register: datadir
      changed_when: false

    - block:

        - name: fetch pagila schema file
          ansible.builtin.get_url:
            url: https://github.com/devrimgunduz/pagila/raw/master/pagila-schema.sql
            dest: "{{ datadir.path }}/schema.sql"
          changed_when: false

        - name: fetch pagila data file
          ansible.builtin.get_url:
            url: https://github.com/devrimgunduz/pagila/raw/master/pagila-data.sql
            dest: "{{ datadir.path }}/data.sql"
          changed_when: false

        - name: concatenate pagila sql files
          ansible.builtin.shell: "cat {{ datadir.path }}/schema.sql {{ datadir.path }}/data.sql > {{ datadir.path }}/pagila.sql"

        - name: load pagila db data
          community.postgresql.postgresql_db:
            name: "{{ postgres_db_name }}"
            state: restore
            login_user: "{{ postgres_db_user }}"
            login_password: "{{ postgres_db_pass }}"
            login_host: "{{ loadbalancer_ips[postgres_db_host] }}"
            target: "{{ datadir.path }}/pagila.sql"
          changed_when: false

      always:

        - name: destroy data tempdir
          ansible.builtin.file:
            state: absent
            path: "{{ datadir.path }}"
          changed_when: false

    - name: load postgresql data
      ansible.builtin.shell: "zcat data/pagila.sql | psql -h {{ loadbalancer_ips[postgres_db_host] }} -U postgres {{ postgres_db_name }}"
      environment:
        PGPASSWORD: "{{ postgres_db_pass }}"
      tags: never
