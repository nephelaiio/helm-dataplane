---
- name: Converge
  hosts: localhost
  gather_facts: false
  roles:
    - nephelaiio.plugins
  tasks:
    - name: Wait for strimzi crd deployment
      kubernetes.core.k8s_info:
        api_version: v1
        kind: CustomResourceDefinition
        name: kafkas.kafka.strimzi.io
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        wait: true
        wait_condition:
          status: True
          type: NamesAccepted
        wait_sleep: 10
        wait_timeout: 300

    - name: Wait for zalando crd deployment
      kubernetes.core.k8s_info:
        api_version: v1
        kind: CustomResourceDefinition
        name: postgresqls.acid.zalan.do
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        wait: true
        wait_condition:
          status: True
          type: NamesAccepted
        wait_sleep: 10
        wait_timeout: 300

    - name: Create metabase namespace
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Namespace
        name: "{{ dataplane_namespace }}"
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"

    - name: Deploy source pagila db
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        resource_definition: "{{ _definition }}"
      vars:
        _definition: |
          apiVersion: acid.zalan.do/v1
          kind: postgresql
          metadata:
            name: {{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}
            namespace: {{ dataplane_pagila_namespace }}
          spec:
            teamId: {{ dataplane_pagila_team }}
            volume:
              size: 1Gi
            numberOfInstances: 1
            allowedSourceRanges:
              - 0.0.0.0/0
            enableMasterLoadBalancer: true
            serviceAnnotations:
              metallb.universe.tf/address-pool: private
            users:
              zalando:
                - superuser
                - createdb
              {{ dataplane_pagila_user }}:
                - login
                - replication
                - createdb
            databases:
              {{ dataplane_pagila_db }}: {{ dataplane_pagila_user }}
            postgresql:
              version: "14"
              parameters:
                wal_level: logical

    - name: Wait for database cluster startup
      ansible.builtin.fail:
        msg: "zalando clusters failed to come up on time"
      vars:
        cluster_failed_data: "{{ cluster_status | rejectattr('status.PostgresClusterStatus', 'equalto', 'Running') }}"
        cluster_failed: "{{ cluster_failed_data | map(attribute='metadata.name') }}"
        cluster_status: "{{ cluster_query | selectattr('status', 'defined') }}"
        cluster_query: "{{ query(
          'kubernetes.core.k8s',
          api_version='acid.zalan.do/v1',
          kind='postgresql',
          kubeconfig=k8s_kubeconfig) }}"
      retries: 15
      delay: 30
      until: cluster_failed | length == 0
      failed_when:
        - (cluster_status | length) != (cluster_query | length)
        - cluster_failed | length > 0

    - name: Query pagila service data
      ansible.builtin.set_fact:
        pagila_host: "{{ _db_svc_data.status.loadBalancer.ingress[0].ip }}"
      vars:
        _db_svc_name: "{{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}"
        _db_svc_data: "{{ service_query | selectattr('metadata.name', 'equalto', _db_svc_name) | first }}"
        service_query: "{{ query(
          'kubernetes.core.k8s',
          namespace=dataplane_pagila_namespace,
          kind='Service',
          kubeconfig=k8s_kubeconfig) }}"

    - name: Query pagila owner data
      ansible.builtin.set_fact:
        pagila_owner_user: "{{ _db_secret_data.data.username | b64decode }}"
        pagila_owner_pass: "{{ _db_secret_data.data.password | b64decode }}"
      vars:
        _db_secret_name: "zalando-{{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}"
        _db_secret_data: "{{ secret_query | selectattr('metadata.name', 'equalto', _db_secret_name) | first }}"
        secret_query: "{{ query(
          'kubernetes.core.k8s',
          namespace=dataplane_pagila_namespace,
          kind='Secret',
          kubeconfig=k8s_kubeconfig) }}"

    - name: Query pagila connection data
      ansible.builtin.set_fact:
        pagila_user: "{{ _db_secret_data.data.username | b64decode }}"
        pagila_pass: "{{ _db_secret_data.data.password | b64decode }}"
      vars:
        _db_secret_name: "{{ dataplane_pagila_user }}-{{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}"
        _db_secret_data: "{{ secret_query | selectattr('metadata.name', 'equalto', _db_secret_name) | first }}"
        secret_query: "{{ query(
          'kubernetes.core.k8s',
          namespace=dataplane_pagila_namespace,
          kind='Secret',
          kubeconfig=k8s_kubeconfig) }}"

    - name: Wait for database port open
      ansible.builtin.wait_for:
        host: "{{ pagila_host }}"
        port: 5432

    - name: Create pagila database
      community.postgresql.postgresql_db:
        name: "{{ dataplane_pagila_db }}"
        state: present
        login_user: "{{ pagila_user }}"
        login_password: "{{ pagila_pass }}"
        login_host: "{{ pagila_host }}"

    - name: Create data tempdir
      ansible.builtin.tempfile:
        state: directory
        prefix: data
      register: datadir
      changed_when: false

    - name: Load pagila data
      block:
        - name: Fetch pagila schema file
          ansible.builtin.get_url:
            url: https://github.com/devrimgunduz/pagila/raw/master/pagila-schema.sql
            dest: "{{ datadir.path }}/schema.sql"
          changed_when: false

        - name: Fetch pagila data file
          ansible.builtin.get_url:
            url: https://github.com/devrimgunduz/pagila/raw/master/pagila-data.sql
            dest: "{{ datadir.path }}/data.sql"
          changed_when: false

        - name: Concatenate pagila sql files
          ansible.builtin.shell: >
            cat {{ datadir.path }}/schema.sql {{ datadir.path }}/data.sql > {{ datadir.path }}/pagila.sql

        - name: Load pagila db data
          community.postgresql.postgresql_db:
            name: "{{ dataplane_pagila_db }}"
            state: restore
            login_user: "{{ pagila_user }}"
            login_password: "{{ pagila_pass }}"
            login_host: "{{ pagila_host }}"
            target: "{{ datadir.path }}/pagila.sql"
          changed_when: false

      always:
        - name: Destroy data tempdir
          ansible.builtin.file:
            state: absent
            path: "{{ datadir.path }}"
          changed_when: false

    - name: Query pagila publications
      community.postgresql.postgresql_query:
        db: "{{ dataplane_pagila_db }}"
        query: "SELECT * FROM pg_publication where pubname = 'dbz_publication'"
        login_user: "{{ pagila_owner_user }}"
        login_password: "{{ pagila_owner_pass }}"
        login_host: "{{ pagila_host }}"
      register: pagila_publication_query

    - name: Create pagila publication
      community.postgresql.postgresql_query:
        db: "{{ dataplane_pagila_db }}"
        query: "CREATE PUBLICATION dbz_publication FOR ALL TABLES"
        login_user: "{{ pagila_owner_user }}"
        login_password: "{{ pagila_owner_pass }}"
        login_host: "{{ pagila_host }}"
      when: pagila_publication_query.query_all_results | flatten | length == 0

    - name: Deploy dataplane Helm chart
      kubernetes.core.helm:
        state: present
        name: "{{ dataplane_chart }}"
        chart_ref: "{{ dataplane_path }}/charts/dataplane"
        release_namespace: "{{ dataplane_namespace }}"
        create_namespace: true
        force: true
        wait: false
        timeout: 30m
        kubeconfig: "{{ k8s_kubeconfig }}"
        binary_path: "{{ k8s_helm_bin }}"
        values: "{{ dataplane_chart_values }}"

    - name: Wait for database cluster startup
      ansible.builtin.fail:
        msg: "zalando clusters failed to come up on time"
      vars:
        cluster_failed: "{{ cluster_status | rejectattr('status.PostgresClusterStatus', 'equalto', 'Running') }}"
        cluster_status: "{{ cluster_query | selectattr('status', 'defined') }}"
        cluster_query: "{{ query(
          'kubernetes.core.k8s',
          api_version='acid.zalan.do/v1',
          kind='postgresql',
          kubeconfig=k8s_kubeconfig) }}"
      retries: 15
      delay: 30
      until: cluster_failed | length == 0
      failed_when:
        - (cluster_status | length) != (cluster_query | length)
        - cluster_failed | length > 0
