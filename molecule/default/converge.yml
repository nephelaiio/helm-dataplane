---
- name: converge

  hosts: localhost

  gather_facts: false

  roles:

    - nephelaiio.plugins

  tasks:

    - name: wait for strimzi crd deployment
      kubernetes.core.k8s_info:
        api_version: v1
        kind: CustomResourceDefinition
        name: kafkas.kafka.strimzi.io
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        wait: true
        wait_condition:
          status: True
          type: NamesAccepted
        wait_sleep: 10
        wait_timeout: 300

    - name: create metabase namespace
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Namespace
        name: "{{ dataplane_namespace }}"
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"

    - name: deploy metabase helm chart
      kubernetes.core.helm:
        state: present
        name: "{{ dataplane_chart }}"
        chart_ref: "{{ dataplane_path }}/charts/dataplane"
        release_namespace: "{{ dataplane_namespace }}"
        create_namespace: true
        wait: true
        timeout: 10m
        kubeconfig: "{{ k8s_kubeconfig }}"
        binary_path: "{{ k8s_helm_bin }}"
        values:
          strimzi:
            kafka:
              storage:
                size: 10Gi
                class: standard
              config:
                offsets.topic.replication.factor: 1
                transaction.state.log.replication.factor: 1
                transaction.state.log.min.isr: 1
            zookeeper:
              storage:
                size: 10Gi
                class: standard
          zalando:
            metabase:
              instances: 1
              loadBalancer: true
              allowedSourceRanges: 0.0.0.0/0
            warehouse:
              instances: 1
              loadBalancer: true
              allowedSourceRanges: 0.0.0.0/0
          metabase:
            ingress:
              enabled: true
              className: nginx-private
              hostName: "{{ dataplane_metabase_hostname }}"
              annotations:
                cert-manager.io/cluster-issuer: "{{ k8s_certmanager_issuer_name }}"

    - name: deploy source postgresql db
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
        resource_definition: "{{ _definition }}"
      vars:
        _definition: |
          apiVersion: acid.zalan.do/v1
          kind: postgresql
          metadata:
            name: {{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}
            namespace: {{ dataplane_pagila_namespace }}
          spec:
            teamId: {{ dataplane_pagila_team }}
            volume:
              size: 1Gi
            numberOfInstances: 1
            allowedSourceRanges:
              - 0.0.0.0/0
            enableMasterLoadBalancer: true
            serviceAnnotations:
              metallb.universe.tf/address-pool: private
            users:
              zalando:
                - superuser
                - createdb
              {{ dataplane_pagila_user }}:
                - superuser
                - createdb
            databases:
              {{ dataplane_pagila_db }}: {{ dataplane_pagila_user }}
            postgresql:
              version: "13"

    - name: wait for database cluster startup
      ansible.builtin.fail:
        msg: "zalando clusters failed to come up on time"
      vars:
        cluster_failed: "{{ cluster_status | rejectattr('status.PostgresClusterStatus', 'equalto', 'Running') | map(attribute='metadata.name') }}"
        cluster_status: "{{ cluster_query | selectattr('status', 'defined') }}"
        cluster_query: "{{
          query(
            'kubernetes.core.k8s',
            api_version='acid.zalan.do/v1',
            kind='postgresql',
            kubeconfig=k8s_kubeconfig
          )
        }}"
      retries: 15
      delay: 30
      until: cluster_failed | length == 0
      failed_when:
        - (cluster_status | length) != (cluster_query | length)
        - cluster_failed | length > 0

    - name: query connection data
      ansible.builtin.set_fact:
        pagila_src_user: "{{ pagila_db_secret_data.data.username | b64decode }}"
        pagila_src_pass: "{{ pagila_db_secret_data.data.password | b64decode }}"
      vars:
        pagila_db_secret_name: "{{ dataplane_pagila_user }}-{{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}"
        pagila_db_secret_data: "{{ secret_query | selectattr('metadata.name', 'equalto', pagila_db_secret_name) | first }}"
        secret_query: "{{
          query(
            'kubernetes.core.k8s',
            namespace=dataplane_pagila_namespace,
            kind='Secret',
            kubeconfig=k8s_kubeconfig
          )
        }}"

    - name: query service data
      ansible.builtin.set_fact:
        pagila_src_host: "{{ pagila_db_svc_data.status.loadBalancer.ingress[0].ip }}"
      vars:
        pagila_db_svc_name: "{{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}"
        pagila_db_svc_data: "{{ service_query | selectattr('metadata.name', 'equalto', pagila_db_svc_name) | first }}"
        service_query: "{{
          query(
            'kubernetes.core.k8s',
            namespace=dataplane_pagila_namespace,
            kind='Service',
            kubeconfig=k8s_kubeconfig
          )
        }}"

    - name: drop database
      community.postgresql.postgresql_db:
        name: "{{ dataplane_pagila_db }}"
        state: absent
        login_user: "{{ pagila_src_user }}"
        login_password: "{{ pagila_src_pass }}"
        login_host: "{{ pagila_src_host }}"

    - name: create database
      community.postgresql.postgresql_db:
        name: "{{ dataplane_pagila_db }}"
        state: present
        login_user: "{{ pagila_src_user }}"
        login_password: "{{ pagila_src_pass }}"
        login_host: "{{ pagila_src_host }}"

    - name: create data tempdir
      ansible.builtin.tempfile:
        state: directory
        prefix: data
      register: datadir
      changed_when: false

    - block:

        - name: fetch pagila schema file
          ansible.builtin.get_url:
            url: https://github.com/devrimgunduz/pagila/raw/master/pagila-schema.sql
            dest: "{{ datadir.path }}/schema.sql"
          changed_when: false

        - name: fetch pagila data file
          ansible.builtin.get_url:
            url: https://github.com/devrimgunduz/pagila/raw/master/pagila-data.sql
            dest: "{{ datadir.path }}/data.sql"
          changed_when: false

        - name: concatenate pagila sql files
          ansible.builtin.shell: "cat {{ datadir.path }}/schema.sql {{ datadir.path }}/data.sql > {{ datadir.path }}/pagila.sql"

        - name: load pagila db data
          community.postgresql.postgresql_db:
            name: "{{ dataplane_pagila_db }}"
            state: restore
            login_user: "{{ pagila_src_user }}"
            login_password: "{{ pagila_src_pass }}"
            login_host: "{{ pagila_src_host }}"
            target: "{{ datadir.path }}/pagila.sql"
          changed_when: false

      always:

        - name: destroy data tempdir
          ansible.builtin.file:
            state: absent
            path: "{{ datadir.path }}"
          changed_when: false
