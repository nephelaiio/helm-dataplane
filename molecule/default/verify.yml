---
- name: Verify
  hosts: localhost
  gather_facts: false
  vars:
    k8s_deploy: false
    k8s_verify: "{{ lookup('ansible.builtin.env', 'K8S_VERIFY', default='true') | bool }}"
    k8s_strimzi_verify: false
    k8s_ingress_verify: false
    k8s_zalando_verify: false
    k8s_volume_verify: false
    verify_pagila_user: postgres
  roles:
    - name: Nephelaiio.plugins
    - name: Nephelaiio.k8s
  tasks:
    - name: Verify dataplane sink database
      when: lookup('ansible.builtin.env', 'CDC_VERIFY', default='true') | bool
      block:
        - name: Query pagila connection data
          ansible.builtin.set_fact:
            pagila_user: "{{ _db_secret_data.data.username | b64decode }}"
            pagila_pass: "{{ _db_secret_data.data.password | b64decode }}"
          vars:
            _db_secret_name: "{{ verify_pagila_user }}-{{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}"
            _db_secret_list: "{{ secret_query | selectattr('metadata.name', 'equalto', _db_secret_name) }}"
            _db_secret_data: "{{ _db_secret_list | first }}"
            secret_query: "{{ query(
              'kubernetes.core.k8s',
              namespace=dataplane_pagila_namespace,
              kind='Secret',
              kubeconfig=k8s_kubeconfig) }}"

        - name: Query pagila service data
          ansible.builtin.set_fact:
            pagila_host: "{{ _db_svc_data.status.loadBalancer.ingress[0].ip }}"
          vars:
            _db_svc_name: "{{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}"
            _db_svc_list: "{{ service_query | selectattr('metadata.name', 'equalto', _db_svc_name) }}"
            _db_svc_data: "{{ _db_svc_list | first }}"
            service_query: "{{ query(
              'kubernetes.core.k8s',
              namespace=dataplane_pagila_namespace,
              kind='Service',
              kubeconfig=k8s_kubeconfig) }}"

        - name: Query pagila tables
          community.postgresql.postgresql_query:
            db: "{{ dataplane_pagila_db }}"
            query: |
              SELECT table_name FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE'
            login_user: "{{ pagila_user }}"
            login_password: "{{ pagila_pass }}"
            login_host: "{{ pagila_host }}"
          register: pagila_table_query

        - name: Record source table data
          ansible.builtin.set_fact:
            pagila_all_tables: "{{ _table_names | list }}"
            pagila_target_tables: "{{ _table_names | reject('regex', '^payment_.*') | reject('regex', '^staff') }}"
          vars:
            _table_names: "{{ pagila_table_query.query_result | map(attribute='table_name') }}"

        - name: Query pagila table data
          community.postgresql.postgresql_query:
            db: "{{ dataplane_pagila_db }}"
            query: "SELECT count(*) from {{ item }}"
            login_user: "{{ pagila_user }}"
            login_password: "{{ pagila_pass }}"
            login_host: "{{ pagila_host }}"
          loop: "{{ pagila_all_tables }}"
          register: pagila_data_query

        - name: Record pagila table data
          ansible.builtin.set_fact:
            pagila_data: "{{ pagila_data_query.results | list_to_dict('item') }}"

        - name: Query warehouse connection data
          ansible.builtin.set_fact:
            warehouse_user: "{{ _db_secret_data.data.username | b64decode }}"
            warehouse_pass: "{{ _db_secret_data.data.password | b64decode }}"
          vars:
            _db_secret_name: "postgres-{{ dataplane_chart }}-warehouse"
            _db_secret_list: "{{ secret_query | selectattr('metadata.name', 'equalto', _db_secret_name) }}"
            _db_secret_data: "{{ _db_secret_list | first }}"
            secret_query: "{{ query(
              'kubernetes.core.k8s',
              namespace=dataplane_namespace,
              kind='Secret',
              kubeconfig=k8s_kubeconfig) }}"

        - name: Query warehouse service data
          ansible.builtin.set_fact:
            warehouse_host: "{{ _db_svc_data.status.loadBalancer.ingress[0].ip }}"
          vars:
            _db_svc_name: "{{ dataplane_chart }}-warehouse"
            _db_svc_list: "{{ service_query | selectattr('metadata.name', 'equalto', _db_svc_name) }}"
            _db_svc_data: "{{ _db_svc_list | first }}"
            service_query: "{{ query(
              'kubernetes.core.k8s',
              namespace=dataplane_namespace,
              kind='Service',
              kubeconfig=k8s_kubeconfig) }}"

        - name: Verify sink database table names
          block:
            - name: Verify warehouse pagila tables
              community.postgresql.postgresql_query:
                db: warehouse
                query: |
                  SELECT table_name FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE'
                login_user: "{{ warehouse_user }}"
                login_password: "{{ warehouse_pass }}"
                login_host: "{{ warehouse_host }}"
              vars:
                map_format: 'nephelaiio.plugins.map_format'
                warehouse_tables_expected: "{{ pagila_target_tables | map(map_format, 'pagila_public_%s') | list }}"
                warehouse_tables_pagila: "{{ warehouse_tables_found | select('match', '^pagila_public_.*') }}"
                warehouse_tables_include: "{{ warehouse_tables_found | select('match', '^include_public_.*') }}"
                warehouse_tables_found: "{{ warehouse_table_query.query_result | map(attribute='table_name') | list }}"
              register: warehouse_table_query
              retries: 20
              delay: 30
              until:
                - warehouse_tables_expected | difference(warehouse_tables_pagila) | length == 0
                - warehouse_tables_pagila | difference(warehouse_tables_expected) | length == 0
                - warehouse_tables_include == ['include_public_staff']

          rescue:
            - name: Debug pagila table mismatches
              ansible.builtin.debug:
                msg: "table diff=[{{ ', '.join(warehouse_tables_diff) }}]"
              vars:
                map_format: 'nephelaiio.plugins.map_format'
                warehouse_tables_expected: "{{ pagila_target_tables| map(map_format, 'pagila_public_%s') | list }}"
                warehouse_tables_pagila: "{{ warehouse_tables_found | select('match', '^pagila_.*') }}"
                warehouse_tables_found: "{{ warehouse_table_query.query_result | map(attribute='table_name') | list }}"
                warehouse_tables_diff_expected: "{{ warehouse_tables_expected | difference(warehouse_tables_pagila) }}"
                warehouse_tables_diff_found: "{{ warehouse_tables_pagila | difference(warehouse_tables_expected) }}"
                warehouse_tables_diff: "{{ warehouse_tables_diff_expected + warehouse_tables_diff_found }}"

            - name: Debug include table mismatches
              ansible.builtin.debug:
                msg: "table diff=[{{ ', '.join(warehouse_tables_diff) }}]"
              vars:
                warehouse_tables_expected: ["include_public_staff"]
                warehouse_tables_include: "{{ warehouse_tables_found | select('match', '^pagila_public_.*') }}"
                warehouse_tables_found: "{{ warehouse_table_query.query_result | map(attribute='table_name') | list }}"
                warehouse_tables_diff_expected: "{{ warehouse_tables_expected | difference(warehouse_tables_include) }}"
                warehouse_tables_diff_found: "{{ warehouse_tables_include | difference(warehouse_tables_expected) }}"
                warehouse_tables_diff: "{{ warehouse_tables_diff_expected + warehouse_tables_diff_found }}"

            - name: Fail verification
              ansible.builtin.fail:

        - name: Validate kafka connector name
          ansible.builtin.fail:
            msg: "connector dataplane-connector was not found"
          vars:
            connector_matches: "{{ connector_query | selectattr('metadata.name', 'equalto', 'pagila-connector') | length }}"
            connector_present: "{{ connector_matches | int > 0 }}"
            connector_query: "{{
              query(
              'kubernetes.core.k8s',
              api_version='',
              kind='KafkaConnector',
              kubeconfig=k8s_kubeconfig
              ) }}"
          until: connector_present
          failed_when: not connector_present

        - name: Wait for cdc to complete
          pause:
            minutes: 5

        - name: Query warehouse table data
          community.postgresql.postgresql_query:
            db: warehouse
            query: "SELECT count(*) from {{ item }}"
            login_user: "{{ warehouse_user }}"
            login_password: "{{ warehouse_pass }}"
            login_host: "{{ warehouse_host }}"
          vars:
            warehouse_tables_present: "{{ warehouse_table_query.query_result | map(attribute='table_name') | sort }}"
          loop: "{{ warehouse_tables_present }}"
          register: warehouse_data_query

        - name: Record warehouse table data
          ansible.builtin.set_fact:
            warehouse_data: "{{ warehouse_data_query.results | list_to_dict('item') }}"

        - name: Verify warehouse pagila table data
          ansible.builtin.fail:
            msg: >-
              warehouse data for table {{ source_table }} is incomplete,
              {{ warehouse_table_records }}/{{ source_table_records }} found"
          vars:
            warehouse_table_records: "{{ (warehouse_data[warehouse_table].query_result | list)[0].count }}"
            warehouse_table: "pagila_public_{{ item }}"
            source_table: "{{ item }}"
            source_table_records: "{{ (pagila_data[source_table].query_result | list)[0].count }}"
          loop_control:
            label: "{{ source_table }}"
          loop: "{{ (pagila_target_tables | list) }}"
          when: source_table_records > warehouse_table_records

        - name: Verify warehouse include table data
          ansible.builtin.fail:
            msg: >-
              warehouse data for table {{ source_table }} is incomplete,
              {{ warehouse_table_records }}/{{ source_table_records }} found"
          vars:
            warehouse_table_records: "{{ (warehouse_data[warehouse_table].query_result | list)[0].count }}"
            warehouse_table: "include_public_{{ item }}"
            source_table: "{{ item }}"
            source_table_records: "{{ (pagila_data[source_table].query_result | list)[0].count }}"
          loop:
            - "staff"
          when: source_table_records > warehouse_table_records

    - name: Verify metabase app database
      when: lookup('ansible.builtin.env', 'METABASE_VERIFY', default='true') | bool
      block:
        - name: Query metabase service data
          ansible.builtin.set_fact:
            metabase_host: "{{ _svc_data.status.loadBalancer.ingress[0].ip }}"
          vars:
            _svc_name: "{{ dataplane_chart }}-metabase-app"
            _svc_list: "{{ service_query | selectattr('metadata.name', 'equalto', _svc_name) }}"
            _svc_data: "{{ _svc_list | first }}"
            service_query: "{{ query(
              'kubernetes.core.k8s',
              namespace=dataplane_namespace,
              kind='Ingress',
              kubeconfig=k8s_kubeconfig) }}"

        - name: Query metabase connection data
          ansible.builtin.set_fact:
            metabase_user: "{{ dataplane_chart_values.metabase.admin.email }}"
            metabase_pass: "{{ _admin_secret_data.data.password | b64decode }}"
          vars:
            _admin_secret_name: "{{ dataplane_chart }}-metabase-admin"
            _admin_secret_list: "{{ secret_query | selectattr('metadata.name', 'equalto', _admin_secret_name) }}"
            _admin_secret_data: "{{ _admin_secret_list | first }}"
            secret_query: "{{ query(
              'kubernetes.core.k8s',
              namespace=dataplane_namespace,
              kind='Secret',
              kubeconfig=k8s_kubeconfig) }}"

        - name: Debug metabase connection data
          ansible.builtin.debug:
            msg: >
              host={{ metabase_host }},
              hostname={{ dataplane_metabase_hostname }},
              user={{ metabase_user }},
              password={{ metabase_pass }}"
          ignore_errors: true

        - name: Log in to metabase
          ansible.builtin.uri:
            url: "https://{{ metabase_host }}/api/session"
            method: POST
            body_format: json
            body:
              username: "{{ metabase_user }}"
              password: "{{ metabase_pass }}"
            headers:
              Host: "{{ dataplane_metabase_hostname }}"
            status_code: 200
            validate_certs: false
          register: metabase_login_query

        - name: Record metabase session id
          ansible.builtin.set_fact:
            metabase_session: "{{ metabase_login_query.json.id }}"

        - name: Verify metabase app DBs
          block:
            - name: Query metabase DBs
              ansible.builtin.uri:
                url: "https://{{ metabase_host }}/api/database/?include=tables"
                method: GET
                headers:
                  Host: "{{ dataplane_metabase_hostname }}"
                  Content-Type: application/json
                  X-Metabase-Session: "{{ metabase_session }}"
                status_code: 200
                validate_certs: false
              register: metabase_db_query
              retries: 10
              delay: 30
              until:
                - metabase_db_query.json.data | rejectattr('name', 'equalto', 'dataplane') | length == 0
                - metabase_db_query.json.data | selectattr('name', 'equalto', 'dataplane') | length == 1

          rescue:
            - name: Verify sample DB deletion
              ansible.builtin.fail:
                msg: "Sample databases have not been removed from Metabase"
              vars:
                extra_dbs: "{{ metabase_db_query.json.data | rejectattr('name', 'equalto', 'dataplane') }}"
              when: extra_dbs | length > 0
              ignore_errors: true

            - name: Verify metabase DB creation
              ansible.builtin.fail:
                msg: "Database 'dataplane' has not been registered to Metabase"
              vars:
                metabase_dbs: "{{ metabase_db_query.json.data | selectattr('name', 'equalto', 'dataplane') }}"
              when: metabase_dbs | length < 1
