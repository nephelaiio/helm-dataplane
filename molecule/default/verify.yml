---
- name: verify

  hosts: localhost

  gather_facts: false

  vars:

    k8s_deploy: false
    k8s_verify: "{{ lookup('ansible.builtin.env', 'K8S_VERIFY', default='true') | bool }}"
    k8s_strimzi_verify: false
    k8s_ingress_verify: false
    k8s_zalando_verify: false
    k8s_volume_verify: false
    verify_pagila_user: postgres

  roles:

    - name: nephelaiio.plugins
    - name: nephelaiio.k8s

  tasks:

    - when: lookup('ansible.builtin.env', 'CDC_VERIFY', default='true') | bool
      block:

        - name: query source connection data
          ansible.builtin.set_fact:
            pagila_user: "{{ pagila_db_secret_data.data.username | b64decode }}"
            pagila_pass: "{{ pagila_db_secret_data.data.password | b64decode }}"
          vars:
            pagila_db_secret_name: "{{ verify_pagila_user }}-{{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}"
            pagila_db_secret_data: "{{ secret_query | selectattr('metadata.name', 'equalto', pagila_db_secret_name) | first }}"
            secret_query: "{{
              query(
                'kubernetes.core.k8s',
                namespace=dataplane_pagila_namespace,
                kind='Secret',
                kubeconfig=k8s_kubeconfig
              )
            }}"

        - name: query source service data
          ansible.builtin.set_fact:
            pagila_host: "{{ pagila_db_svc_data.status.loadBalancer.ingress[0].ip }}"
          vars:
            pagila_db_svc_name: "{{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}"
            pagila_db_svc_data: "{{ service_query | selectattr('metadata.name', 'equalto', pagila_db_svc_name) | first }}"
            service_query: "{{
              query(
                'kubernetes.core.k8s',
                namespace=dataplane_pagila_namespace,
                kind='Service',
                kubeconfig=k8s_kubeconfig
              )
            }}"

        - name: query source tables
          community.postgresql.postgresql_query:
            db: db
            query: "SELECT table_name FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE'"
            login_user: "{{ pagila_user }}"
            login_password: "{{ pagila_pass }}"
            login_host: "{{ pagila_host }}"
          register: source_table_query

        - name: record source table data
          ansible.builtin.set_fact:
            source_tables: "{{ source_table_query.query_result | map(attribute='table_name') | difference(['payment']) | list }}"

        - name: query source table data
          community.postgresql.postgresql_query:
            db: db
            query: "SELECT count(*) from {{ item }}"
            login_user: "{{ pagila_user }}"
            login_password: "{{ pagila_pass }}"
            login_host: "{{ pagila_host }}"
          loop: "{{ source_tables }}"
          register: source_data_query

        - name: record source table data
          ansible.builtin.set_fact:
            source_data: "{{ source_data_query.results | list_to_dict('item') }}"

        - name: query warehouse connection data
          ansible.builtin.set_fact:
            warehouse_user: "{{ warehouse_db_secret_data.data.username | b64decode }}"
            warehouse_pass: "{{ warehouse_db_secret_data.data.password | b64decode }}"
          vars:
            warehouse_db_secret_name: "postgres-{{ dataplane_chart }}-warehouse"
            warehouse_db_secret_data: "{{ secret_query | selectattr('metadata.name', 'equalto', warehouse_db_secret_name) | first }}"
            secret_query: "{{
              query(
                'kubernetes.core.k8s',
                namespace=dataplane_namespace,
                kind='Secret',
                kubeconfig=k8s_kubeconfig
              )
            }}"

        - name: query source service data
          ansible.builtin.set_fact:
            warehouse_host: "{{ warehouse_db_svc_data.status.loadBalancer.ingress[0].ip }}"
          vars:
            warehouse_db_svc_name: "{{ dataplane_chart }}-warehouse"
            warehouse_db_svc_data: "{{ service_query | selectattr('metadata.name', 'equalto', warehouse_db_svc_name) | first }}"
            service_query: "{{
              query(
                'kubernetes.core.k8s',
                namespace=dataplane_namespace,
                kind='Service',
                kubeconfig=k8s_kubeconfig
              )
            }}"

        - name: verify warehouse tables
          community.postgresql.postgresql_query:
            db: warehouse
            query: "SELECT table_name FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE'"
            login_user: "{{ warehouse_user }}"
            login_password: "{{ warehouse_pass }}"
            login_host: "{{ warehouse_host }}"
          vars:
            warehouse_tables_expected: "{{ source_tables | map('map_format', 'pagila_%s') | list }}"
            warehouse_tables_found: "{{ warehouse_table_query.query_result | map(attribute='table_name') | list }}"
          register: warehouse_table_query
          retries: 20
          delay: 30
          until: warehouse_tables_expected | difference(warehouse_tables_found) | length == 0

        - name: wait for cdc to complete
          pause:
            minutes: 5

        - name: query warehouse table data
          community.postgresql.postgresql_query:
            db: warehouse
            query: "SELECT count(*) from {{ item }}"
            login_user: "{{ warehouse_user }}"
            login_password: "{{ warehouse_pass }}"
            login_host: "{{ warehouse_host }}"
          vars:
            warehouse_tables_present: "{{ warehouse_table_query.query_result | map(attribute='table_name') | sort }}"
          loop: "{{ warehouse_tables_present }}"
          register: warehouse_data_query

        - name: record warehouse table data
          ansible.builtin.set_fact:
            warehouse_data: "{{ warehouse_data_query.results | list_to_dict('item') }}"

        - name: verify warehouse table data
          ansible.builtin.fail:
            msg: "warehouse data for table {{ source_table }} is incomplete, {{ warehouse_table_records }}/{{ source_table_records }} found"
          vars:
            warehouse_table_records: "{{ (warehouse_data[warehouse_table].query_result | list)[0].count }}"
            warehouse_table: "pagila_{{ item }}"
            source_table: "{{ item }}"
            source_table_records: "{{ (source_data[source_table].query_result | list)[0].count }}"
          loop_control:
            label: "{{ source_table }}"
          loop: "{{ (source_data.keys() | list) }}"
          when: source_table_records > warehouse_table_records

    - when: lookup('ansible.builtin.env', 'METABASE_VERIFY', default='true') | bool
      block:

      - name: query metabase service data
        ansible.builtin.set_fact:
          metabase_host: "{{ metabase_svc_data.status.loadBalancer.ingress[0].ip }}"
        vars:
          metabase_svc_name: "{{ dataplane_chart }}-metabase-app"
          metabase_svc_data: "{{ service_query | selectattr('metadata.name', 'equalto', metabase_svc_name) | first }}"
          service_query: "{{
            query(
              'kubernetes.core.k8s',
              namespace=dataplane_namespace,
              kind='Ingress',
              kubeconfig=k8s_kubeconfig
            )
          }}"

      - name: query metabase connection data
        ansible.builtin.set_fact:
          metabase_user: "{{ dataplane_chart_values.metabase.admin.email }}"
          metabase_pass: "{{ metabase_admin_secret_data.data.password | b64decode }}"
        vars:
          metabase_admin_secret_name: "{{ dataplane_chart }}-metabase-admin"
          metabase_admin_secret_data: "{{ secret_query | selectattr('metadata.name', 'equalto', metabase_admin_secret_name) | first }}"
          secret_query: "{{
            query(
              'kubernetes.core.k8s',
              namespace=dataplane_namespace,
              kind='Secret',
              kubeconfig=k8s_kubeconfig
            )
          }}"

      - name: log in to metabase
        ansible.builtin.uri:
          url: "https://{{ metabase_host }}/api/session"
          method: POST
          body_format: json
          body:
            username: "{{ metabase_user }}"
            password: "{{ metabase_pass }}"
          headers:
            Host: "{{ dataplane_metabase_hostname }}"
          status_code: 200
          validate_certs: false
        register: metabase_login_query

      - name: record metabase session id
        ansible.builtin.set_fact:
          metabase_session: "{{ metabase_login_query.json.id }}"

      - name: query metabase dbs
        ansible.builtin.uri:
          url: "https://{{ metabase_host }}/api/database/?include=tables"
          method: GET
          headers:
            Host: "{{ dataplane_metabase_hostname }}"
            Content-Type: application/json
            X-Metabase-Session: "{{ metabase_session }}"
          status_code: 200
          validate_certs: false
        register: metabase_db_query

      - name: ensure sample db deletion
        ansible.builtin.fail:
          msg: "Sample databases have not been removed from Metabase"
        vars:
          extra_dbs: "{{ metabase_db_query.json.data | rejectattr('name', 'equalto', 'dataplane') }}"
        when: extra_dbs | length > 0

      - name: record metabase db data
        ansible.builtin.fail:
          msg: "Database 'dataplane' has not been registered to Metabase"
        vars:
          metabase_dbs: "{{ metabase_db_query.json.data | selectattr('name', 'equalto', 'dataplane') }}"
        when: metabase_dbs | length < 1

      - name: print metabase access credentials
        ansible.builtin.debug:
          msg: "username={{ metabase_user }}, metabase_pass={{ metabase_pass }}"
