---
- name: verify

  hosts: localhost

  gather_facts: false

  vars:

    k8s_deploy: false
    k8s_verify: true
    k8s_strimzi_verify: false
    k8s_ingress_verify: false
    k8s_zalando_verify: false
    k8s_volume_verify: false
    verify_pagila_user: postgres

  roles:

    - name: nephelaiio.plugins
      when: true
    - name: nephelaiio.k8s
      when: false

  tasks:

    - name: query source connection data
      ansible.builtin.set_fact:
        pagila_user: "{{ pagila_db_secret_data.data.username | b64decode }}"
        pagila_pass: "{{ pagila_db_secret_data.data.password | b64decode }}"
      vars:
        pagila_db_secret_name: "{{ verify_pagila_user }}-{{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}"
        pagila_db_secret_data: "{{ secret_query | selectattr('metadata.name', 'equalto', pagila_db_secret_name) | first }}"
        secret_query: "{{
          query(
            'kubernetes.core.k8s',
            namespace=dataplane_pagila_namespace,
            kind='Secret',
            kubeconfig=k8s_kubeconfig
          )
        }}"

    - name: query source service data
      ansible.builtin.set_fact:
        pagila_host: "{{ pagila_db_svc_data.status.loadBalancer.ingress[0].ip }}"
      vars:
        pagila_db_svc_name: "{{ dataplane_pagila_team }}-{{ dataplane_pagila_db }}"
        pagila_db_svc_data: "{{ service_query | selectattr('metadata.name', 'equalto', pagila_db_svc_name) | first }}"
        service_query: "{{
          query(
            'kubernetes.core.k8s',
            namespace=dataplane_pagila_namespace,
            kind='Service',
            kubeconfig=k8s_kubeconfig
          )
        }}"

    - name: query source tables
      community.postgresql.postgresql_query:
        db: db
        query: "SELECT table_name FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE'"
        login_user: "{{ pagila_user }}"
        login_password: "{{ pagila_pass }}"
        login_host: "{{ pagila_host }}"
      register: source_table_query

    - name: record source table data
      ansible.builtin.set_fact:
        source_tables: "{{ source_table_query.query_result | map(attribute='table_name') | sort }}"

    - name: query source table data
      community.postgresql.postgresql_query:
        db: db
        query: "SELECT count(*) from {{ item }}"
        login_user: "{{ pagila_user }}"
        login_password: "{{ pagila_pass }}"
        login_host: "{{ pagila_host }}"
      loop: "{{ source_tables }}"
      register: source_data_query

    - name: record source table data
      ansible.builtin.set_fact:
        source_data: "{{ source_data_query.results | list_to_dict('item') }}"

    - name: query warehouse connection data
      ansible.builtin.set_fact:
        warehouse_user: "{{ warehouse_db_secret_data.data.username | b64decode }}"
        warehouse_pass: "{{ warehouse_db_secret_data.data.password | b64decode }}"
      vars:
        warehouse_db_secret_name: "postgres-dataplane-warehouse-db"
        warehouse_db_secret_data: "{{ secret_query | selectattr('metadata.name', 'equalto', warehouse_db_secret_name) | first }}"
        secret_query: "{{
          query(
            'kubernetes.core.k8s',
            namespace=dataplane_pagila_namespace,
            kind='Secret',
            kubeconfig=k8s_kubeconfig
          )
        }}"

    - name: query source service data
      ansible.builtin.set_fact:
        warehouse_host: "{{ warehouse_db_svc_data.status.loadBalancer.ingress[0].ip }}"
      vars:
        warehouse_db_svc_name: "dataplane-warehouse-db"
        warehouse_db_svc_data: "{{ service_query | selectattr('metadata.name', 'equalto', warehouse_db_svc_name) | first }}"
        service_query: "{{
          query(
            'kubernetes.core.k8s',
            namespace=dataplane_pagila_namespace,
            kind='Service',
            kubeconfig=k8s_kubeconfig
          )
        }}"

    - name: verify warehouse tables
      community.postgresql.postgresql_query:
        db: warehouse
        query: "SELECT table_name FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE'"
        login_user: "{{ warehouse_user }}"
        login_password: "{{ warehouse_pass }}"
        login_host: "{{ warehouse_host }}"
      vars:
        warehouse_tables_expected: "{{ source_tables | map('map_format', 'pagila_%s') }}"
      register: warehouse_table_data
      failed_when: warehouse_table_data.query_result | map(attribute='table_name') | difference(warehouse_tables_expected) | length > 0
      retries: 10
      delay: 30

    - name: query warehouse table data
      community.postgresql.postgresql_query:
        db: warehouse
        query: "SELECT count(*) from {{ item }}"
        login_user: "{{ warehouse_user }}"
        login_password: "{{ warehouse_pass }}"
        login_host: "{{ warehouse_host }}"
      vars:
        warehouse_tables_present: "{{ warehouse_table_query.query_result | map(attribute='table_name') | sort }}"
      loop: "{{ warehouse_tables_present }}"
      register: warehouse_data_query

    - name: record warehouse table data
      ansible.builtin.set_fact:
        warehouse_data: "{{ warehouse_data_query.results | list_to_dict('item') }}"

    - debug:
        var: warehouse_table_query

    - debug:
        var: warehouse_data_query

    - name: verify warehouse table data
      ansible.builtin.fail:
        msg: "warehouse data for table {{ source_table }} is incomplete, {{ warehouse_table_records }}/{{ source_table_records }} found"
      vars:
        warehouse_table_records: "{{ (warehouse_data[warehouse_table].query_result | list)[0].count }}"
        warehouse_table: "pagila_{{ item }}"
        source_table: "{{ item }}"
        source_table_records: "{{ (source_data[source_table].query_result | list)[0].count }}"
      loop_control:
        label: "{{ source_table }}"
      loop: "{{ (source_data.keys() | list) }}"
      when: source_table_records > warehouse_table_records
